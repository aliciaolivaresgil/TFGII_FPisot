plugins {
    id "com.android.application"
    
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    // END: FlutterFire Configuration

    id "kotlin-android"

    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

def getEnvVariable(String name) {
    Properties properties = new Properties()
    def envFile = file("${rootProject.projectDir}/../.env")
    if (envFile.exists()) {
        envFile.withInputStream { stream ->
            properties.load(stream)
        }
    } else {
        println "Warning: .env file not found at ${envFile.path}"
    }
    return properties[name]
}

android {
    namespace = "com.example.project_app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.example.project_app"
        minSdk = 21
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName

        // Agrega la clave API a los placeholders del manifiesto
        manifestPlaceholders = [
            googleApiKey: getEnvVariable("GOOGLE_API_KEY") ?: "",
            mapboxApiKey: getEnvVariable("MAPBOX_API_KEY") ?: ""
        ]
    }

    buildTypes {
        release {
            // Configuración para habilitar Crashlytics en el build release
            signingConfig = signingConfigs.debug

            // Enable the following line to shrink, obfuscate, and optimize your app’s code when building for release.
            // minifyEnabled true
            // shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Para habilitar Crashlytics, también en los builds de depuración (opcional)
    buildTypes {
        debug {
            firebaseCrashlytics {
                // Se recomienda desactivar en modo depuración
                mappingFileUploadEnabled false
            }
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    // Crashlytics necesita el siguiente plugin para funcionar
    implementation platform('com.google.firebase:firebase-bom:30.3.1') // Puedes actualizar según la versión más reciente
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'
}

// Aplicar Google Services
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
